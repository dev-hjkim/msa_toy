plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.asciidoctor.jvm.convert' version '3.3.2' // asciidoctor plugin
}

group = 'com.fashion.celebrity'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets")) // 문서 저장위치
	set('springCloudVersion', "2020.0.2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.projectlombok:lombok:1.18.20'
	implementation 'junit:junit:4.13.1'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'

	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'



	// token 생성
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'org.json:json:20201115'
	implementation 'com.googlecode.json-simple:json-simple:1.1'
	implementation 'io.jsonwebtoken:jjwt:0.9.0'
	implementation 'javax.validation:validation-api:2.0.1.Final'

	// mapstruct converter
	implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.1.Final'
	implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.4.1.Final'
	implementation group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'

	// 메일 전송
	implementation 'org.springframework.boot:spring-boot-starter-mail'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE' // mock용
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	println("---------------- delete present asciidoctor.")
	delete file('src/main/resources/static/docs')
}

asciidoctor.doLast {
	println("---------------- asciidoctor is deleted!")
}


bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

task copyDocument(type: Copy) { // 생성된 docs 파일을 build시 static 아래에 docs로 복사!
	dependsOn bootJar

	from file("build/docs/asciidoc/")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument // build시 copy 실행
}
